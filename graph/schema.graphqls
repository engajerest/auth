

type User {
id: Int!
name: String!
}
type GetUser{
UserId: Int!
firstname: String!
lastname:String!
mobile:String!
email:String!
Profileimage:String!
created:String!
status:String!
}
type UserData{
UserId:Int!
Firstname:String!
Lastname:String!
Email:String!
Mobile:String!
Profileimage:String!
Roleid:Int
Configid:Int
Token:String!
Tenantid:Int
Tenantname:String
Tenantimageurl:String
Locationid:Int
Opentime:String
Closetime:String
CreatedDate:String!
Status:String!
}
type tenantdata{
  Subscriptionid:Int!
  Packageid:Int!
  Packagename:String!
  Moduleid:Int!
  Modulename:String!
  Validitydate:String!
  Validity:Boolean!
   Categoryid:Int!
 Subcategoryid:Int!
 Iconurl:String!
 Logourl:String!
 Paymentstatus:Boolean!

}

type LoginData{
status:Boolean!
code:Int!
message:String!
userInfo:UserData
tenantinfo:[tenantdata]
}
type UserCreatedData{
status:Boolean!
code:Int!
message:String!
userInfo:UserData!
}
input RefreshTokenInput{
  token: String!
}
input NewUser {
firstname: String!
lastname:String!
email:String!
password: String!
Mobile:String!
roleid:Int!
referenceid:Int!
locationid:Int!
configid:Int!
}
input Login {
username: String!
password: String!
tenanttoken:String!
}
input Reset {
 password: String!
}
input userupdateinput{
  userid:Int!
  firstname:String!
  lastname:String!
  email:String!
  contactno:String!
  profileimage:String!

}
type updateddata{
status:Boolean!
code:Int!
message:String!
}
type Query {
users:[GetUser]!
getuser:LoginData! 
}
type Mutation {
createUser(create: NewUser!): UserCreatedData
login(input: Login!): LoginData
ResetPassword(input:Reset!):String!
# we'll talk about this in authentication section
refreshToken(input: RefreshTokenInput!): String!
updateuser(input:userupdateinput):updateddata
}